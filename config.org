* Emacs
** Clock
   #+BEGIN_SRC emacs-lisp
     (setq display-time-24hr-format t)
     (display-time-mode 1)
   #+END_SRC
** Disabling backup files
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
   #+END_SRC
** Disabling auto saves
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-default nil)
   #+END_SRC
** Use y-n instead of yes-no
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Set keybind for terminal
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<s-return>") 'ansi-term)
   #+END_SRC
** Set scrolling speed
   When moving the cursor past the end of the screen, it will now
   scroll the page line by line.
   #+BEGIN_SRC emacs-lisp
     ;(setq scroll-conservatively 100)
   #+END_SRC
** Disable ring bell
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** Subword
   M-b will now jump back
   one subword in camelCase
   #+BEGIN_SRC emacs-lisp
     (global-subword-mode 1)
   #+END_SRC
** Electric pairs
   Make every enabled symbol create
   a pair. For example () or []
   #+BEGIN_SRC emacs-lisp
     (setq electric-pair-pairs '(
				 (?\( . ?\)) ;; ()
				 (?\[ . ?\]) ;; []
				 (?\{ . ?\}) ;; {}
				 ))
     (electric-pair-mode t)
   #+END_SRC
** Use highlight line mode
   #+BEGIN_SRC emacs-lisp
     (when window-system (global-hl-line-mode t))
   #+END_SRC
** Quality of life
    Remove toolbar
    #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1)
    #+END_SRC

    Remove menubar
    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode -1)
    #+END_SRC

    Remove scrollbar
    #+BEGIN_SRC emacs-lisp
      (scroll-bar-mode -1)
    #+END_SRC

    Inhibit startup message
    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-message t)
    #+END_SRC

    linum-mode
    #+BEGIN_SRC emacs-lisp
      ;(linum-mode t)
    #+END_SRC

    Line and column numbers
    #+BEGIN_SRC emacs-lisp
      (line-number-mode 1)
      (column-number-mode 1)
    #+END_SRC
** Buffers
*** Enable ibuffer
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x b") 'ibuffer)
    #+END_SRC
*** Switch buffers
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
    #+END_SRC
*** New buffers
    New buffers will always be created side-by-side
    with current buffer
    #+BEGIN_SRC emacs-lisp
      (setq split-height-threshold nil)
      (setq split-width-threshold 0)
    #+END_SRC

    Set the cursor in the new buffer automatically
    #+BEGIN_SRC emacs-lisp
      (defun split-and-follow-horizontally ()
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
      (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

      (defun split-and-follow-vertically ()
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
      (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
    #+END_SRC
** Config
*** Edit
    C-c e will open this config in current buffer
    #+BEGIN_SRC emacs-lisp
      (defun config-visit ()
	  (interactive)
	  (find-file "~/.emacs.d/config.org"))
	(global-set-key (kbd "C-c e") 'config-visit)
    #+END_SRC
*** Reload
    C-c r will reload this config
    #+BEGIN_SRC emacs-lisp
      (defun config-reload ()
	  (interactive)
	  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
	(global-set-key (kbd "C-c r") 'config-reload)
    #+END_SRC
** Kill whole word
   Kills the word you are currently in
   #+BEGIN_SRC emacs-lisp
     (defun kill-whole-word ()
       (interactive)
       (backward-word)
       (kill-word 1))
     (global-set-key (kbd "C-c w w") 'kill-whole-word)
   #+END_SRC
* Packages
** which-key
   When doing C-x, C-c or any other C- modifier,
   will popup a window with possible keys
   and their functions.
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
	 :init
	 (which-key-mode))
   #+END_SRC
** Beacon
   Highlights current row when changing buffer
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
	 :ensure t
	 :init
	 (beacon-mode 1))
   #+END_SRC
** Disable-mouse
   #+BEGIN_SRC emacs-lisp
     (use-package disable-mouse
	   :ensure t
	   :init
	   )
     (global-disable-mouse-mode)
   #+END_SRC
** Scroll golden ratio
   #+BEGIN_SRC emacs-lisp
     (use-package golden-ratio-scroll-screen
	   :ensure t
	   :init
	   )
       ;; Actually reversed, up goes down and vice versa
       (global-set-key (kbd "C-v") 'golden-ratio-scroll-screen-up)
       (global-set-key (kbd "M-v") 'golden-ratio-scroll-screen-down)
   #+END_SRC
** Avy
   M-s will now let you go to a char.
   #+BEGIN_SRC emacs-lisp
     (use-package avy
	 :ensure t
	 :bind
	 ("M-s" . avy-goto-char))
   #+END_SRC
** Switch-window
   When having more than 2 windows open, using C-x o
   will ask for a letter corresponding to the window
   we want to switch to.
   #+BEGIN_SRC emacs-lisp
     (use-package switch-window
       :ensure t
       :config
       (setq switch-window-input-style 'minibuffer)
       (setq switch-window-increase 4)
       (setq switch-window-threshold 2)
       (setq switch-window-shortcut-style 'qwerty)
       (setq switch-window-qwerty-shortcuts
	     '("a" "s" "d" "f" "h" "j" "k" "l"))
       :bind
       ([remap other-window] . switch-window))
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-items '((recents . 10))))
   #+END_SRC
** Auto completion
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC
** Symon performance monitor
   Use S-h to show a performance monitor in the minibuffer
   #+BEGIN_SRC emacs-lisp
     (use-package symon
       :ensure t
       :bind
       ("s-h" . symon-mode))
   #+END_SRC
* Terminal
** Default shell
   Set default shell to bash
   #+BEGIN_SRC emacs-lisp
     (defvar my-term-shell "/bin/bash")
       (defadvice ansi-term (before force-bash)
	 (interactive (list my-term-shell)))
       (ad-activate 'ansi-term)
   #+END_SRC

* Org
** Basic config
   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
     (add-to-list 'org-structure-template-alist
		  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
   #+END_SRC

   Automatically add "emacs-lisp"
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** Org bullets
   Make Org use bullets instead of asterisks
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
	 :ensure t
	 :config
	 (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+END_SRC
* IDO
** Enable IDO-mode
   Makes finding buffers and files more intuitive
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+END_SRC
** IDO-vertical
   The file-list at the bottom will now be vertical
   It can also be traversed with C-n and C-p
   #+BEGIN_SRC emacs-lisp
     (use-package ido-vertical-mode
	 :ensure t
	 :init
	 (ido-vertical-mode 1))
       (setq ido-vertical-define-keys 'C-n-and-C-p-only)
   #+END_SRC
** Smex
   Using M-x will now also provide a list
   of available commands.
   #+BEGIN_SRC emacs-lisp
     (use-package smex
	      :ensure t
	      :init (smex-initialize)
	      :bind
	      ("M-x" . smex))
   #+END_SRC
* Modeline
** Spaceline
   #+BEGIN_SRC emacs-lisp
     (use-package spaceline
       :ensure t
       :config
       (require 'spaceline-config)
       (setq powerline-default-separator (quote arrow))
       (spaceline-spacemacs-theme))
   #+END_SRC
** Diminish
   Hide minor modes from the modeline
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :init
       (diminish 'hungry-delete-mode)
       (diminish 'beacon-mode)
       (diminish 'which-key-mode)
       (diminish 'rainbow-mode)
       (diminish 'company-mode)
       (diminish 'subword-mode)
       (diminish 'disable-mouse-global-mode))
   #+END_SRC
